% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/query.R
\docType{methods}
\name{sqlite-query}
\alias{dbBind,SQLiteResult-method}
\alias{dbClearResult,SQLiteResult-method}
\alias{dbFetch,SQLiteResult-method}
\alias{dbSendQuery,SQLiteConnection,character-method}
\alias{sqlite-query}
\title{Execute a SQL statement on a database connection}
\usage{
\S4method{dbSendQuery}{SQLiteConnection,character}(conn, statement,
  params = NULL, ...)

\S4method{dbBind}{SQLiteResult}(res, params, ...)

\S4method{dbFetch}{SQLiteResult}(res, n = -1, ..., row.names = NA)

\S4method{dbClearResult}{SQLiteResult}(res, ...)
}
\arguments{
\item{conn}{an \code{\linkS4class{SQLiteConnection}} object.}

\item{statement}{a character vector of length one specifying the SQL
statement that should be executed.  Only a single SQL statment should be
provided.}

\item{params}{A named list of query parameters to be substituted into
a parameterised query.}

\item{...}{Unused. Needed for compatibility with generic.}

\item{res}{an \code{\linkS4class{SQLiteResult}} object.}

\item{n}{maximum number of records to retrieve per fetch. Use \code{-1} to
retrieve all pending records; use \code{0} for to fetch the default
number of rows as defined in \code{\link{SQLite}}}

\item{row.names}{Either \code{TRUE}, \code{FALSE}, \code{NA} or a string.

If \code{TRUE}, always translate row names to a column called "row_names".
If \code{FALSE}, never translate row names. If \code{NA}, translate
rownames only if they're a character vector.

A string is equivalent to \code{TRUE}, but allows you to override the
default name.

For backward compatibility, \code{NULL} is equivalent to \code{FALSE}.}
}
\description{
To retrieve results a chunk at a time, use \code{dbSendQuery},
\code{dbFetch}, then \code{dbClearResult}. Alternatively, if you want all the
results (and they'll fit in memory) use \code{dbGetQuery} which sends,
fetches and clears for you. To run the same prepared query with multiple
inputs, use \code{dbBind}.
}
\details{
See \link{sqlite-meta} for how to extract other metadata from the result set.
}
\examples{
library(datasets)
library(utils)
library(DBI)
db <- RSQLite::datasetsDb()

# Run query to get results as dataframe
dbGetQuery(db, "SELECT * FROM USArrests LIMIT 3")

# Send query to pull requests in batches
res <- dbSendQuery(db, "SELECT * FROM USArrests")
dbFetch(res, n = 2)
dbFetch(res, n = 2)
dbHasCompleted(res)
dbClearResult(res)

# Parameterised queries are safest when you accept user input
dbGetQuery(db, "SELECT * FROM USArrests WHERE Murder < ?", list(3))

# Or create and then bind
rs <- dbSendQuery(db, "SELECT * FROM USArrests WHERE Murder < ?")
dbBind(rs, list(3))
dbFetch(rs)

# Named parameters are a little more convenient
rs <- dbSendQuery(db, "SELECT * FROM USArrests WHERE Murder < :x")
dbBind(rs, list(x = 3))
dbFetch(rs)

dbDisconnect(db)
}

